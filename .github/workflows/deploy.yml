name: Java CI/CD AWS EC2

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the Git Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "gradle"

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('/.gradle', '/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: java-app
          path: build/libs/*.jar

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the Git Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "gradle"

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('/.gradle', '/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Test with Gradle
        run: |
          ./gradlew check --info --stacktrace
          ./gradlew test
          ./gradlew jacocoTestReport

  publish:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout the Git Repository
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: java-app
          path: build/libs

      - name: List contents of build/libs
        run: ls -al

      - name: Rename JAR to standard name
        run: |
          JAR=$(ls build/libs/*.jar | head -n 1)
          mv "$JAR" build/libs/product-service-0.0.1-SNAPSHOT.jar

      - name: Docker login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USER }}" --password-stdin

      - name: Build & Push Docker Image
        run: |
          docker build -t ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} .
          docker push ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Checkout the Git Repository
        uses: actions/checkout@v4

      - name: Install SSH client
        run: sudo apt-get install -y openssh-client

      - name: Decode SSH key
        run: echo "${{ secrets.EC2_SSH_KEY }}" | base64 -d > ec2-key.pem

      - name: Set SSH key permissions
        run: chmod 400 ec2-key.pem

      - name: Deploy Docker container to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
            docker container rm -f ${{ secrets.CONTAINER_NAME }} || true
            docker image rm -f ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} || true
            docker pull ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}
            docker run -d --restart=always --name ${{ secrets.CONTAINER_NAME }} \
              -p 80:8080 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e JDBC_DATABASE_URL=${{ secrets.JDBC_DATABASE_URL }} \
              -e JDBC_DATABASE_USERNAME=${{ secrets.JDBC_DATABASE_USERNAME }} \
              -e JDBC_DATABASE_PASSWORD=${{ secrets.JDBC_DATABASE_PASSWORD }} \
              ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}
          EOF